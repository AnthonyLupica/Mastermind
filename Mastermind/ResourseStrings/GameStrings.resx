<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exit" xml:space="preserve">
    <value>
Thanks for playing!!!
</value>
  </data>
  <data name="Guess_Prompt" xml:space="preserve">
    <value>Guess {0} of {1}: </value>
  </data>
  <data name="Introduction" xml:space="preserve">
    <value>Welcome to the "Mastermind Challenge", where your wits will be put to the test. 
See if you can decipher my secret code before time runs out!

 
</value>
  </data>
  <data name="KeepPlayingLost" xml:space="preserve">
    <value>Try again? 
Enter (N) to quit or any other key to give it another go with a new secret code: </value>
  </data>
  <data name="KeepPlayingWon" xml:space="preserve">
    <value>I have rarely known defeat. It seems you are something of a mastermind yourself.
Enter (N) to quit or any other key to continue playing:</value>
  </data>
  <data name="RoundStart" xml:space="preserve">
    <value>I have generated a secret code which is:                                                  
   - {0} digits long                                                                                    
   - Composed only of numbers in the range [{1}, {2}]

For each digit in your guess that matches the number and position
of a digit in the secret code, my feedback includes one plus (+) sign. 

For each digit in your guess that matches the number but not the position
of a digit in the secret code, my feedback includes one minus (-) sign.

All (+'s) are scored for feedback in a guess before a single (-) is scored.

Each digit comprising the secret code will only be used for scoring once per feedback.
Ex) guess "2223" for a secret code of "3232" produces feedback "+--".
      A '+' for the second "2" of the guess.
      One minus for the "3"
      Another minus for a "2"
One "2" remains unscored as all "2"s of the secret code have already been used for scoring.
                                                                                                                     
One question remains ... Can you break the code within {3} guesses?
   
</value>
  </data>
  <data name="Validation_DigitNotInSecretCharSet" xml:space="preserve">
    <value>Your guess contains numbers that are out of range ... Recall the secet code contains only numbers in the range [{0}, {1}].
</value>
  </data>
  <data name="Validation_EmptyGuess" xml:space="preserve">
    <value>Your guess was empty ... You cannot run from the Mastermind!
</value>
  </data>
  <data name="Validation_NonDigit" xml:space="preserve">
    <value>Your guess contains non-digit characters ... You cannot fool the Mastermind so easily!
</value>
  </data>
  <data name="Validation_SecretLength" xml:space="preserve">
    <value>Your guess is not equal in length with the secret code I have generated ... Recall the secret code is of length {0}.
</value>
  </data>
</root>